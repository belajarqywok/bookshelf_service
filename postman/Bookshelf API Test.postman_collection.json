{
	"info": {
		"_postman_id": "7a7de64c-a77c-4cd5-a788-ad8d642b9941",
		"name": "Bookshelf API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication and Authorization Endpoints",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"\r",
									"    pm.expect(responseJson.message).to.equals('Register Success');\r",
									"    pm.expect(responseJson.http_code).to.equals(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fullname\" : \"test\",\r\n    \"email\" : \"test1@test1.com\",\r\n    \"password\" : \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"register"
							]
						}
					},
					"response": [
						{
							"name": "Register Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullname\" : \"test\",\r\n    \"email\" : \"test1@test1.com\",\r\n    \"password\" : \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/v1/register",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"v1",
										"register"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-RateLimit-PathLimit",
									"value": "50"
								},
								{
									"key": "X-RateLimit-PathRemaining",
									"value": "49"
								},
								{
									"key": "X-RateLimit-PathReset",
									"value": "1690693776076"
								},
								{
									"key": "X-RateLimit-UserLimit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-UserRemaining",
									"value": "99"
								},
								{
									"key": "X-RateLimit-UserReset",
									"value": "1690693816076"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "46"
								},
								{
									"key": "Date",
									"value": "Sun, 30 Jul 2023 05:08:37 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Register Success\",\n    \"http_code\": 201\n}"
						},
						{
							"name": "Register Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullname\" : \"test\",\r\n    \"email\" : \"test1@test1.com\",\r\n    \"password\" : \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/v1/register",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"v1",
										"register"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-RateLimit-PathLimit",
									"value": "50"
								},
								{
									"key": "X-RateLimit-PathRemaining",
									"value": "49"
								},
								{
									"key": "X-RateLimit-PathReset",
									"value": "1690862550119"
								},
								{
									"key": "X-RateLimit-UserLimit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-UserRemaining",
									"value": "99"
								},
								{
									"key": "X-RateLimit-UserReset",
									"value": "1690862590119"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "50"
								},
								{
									"key": "Date",
									"value": "Tue, 01 Aug 2023 04:01:30 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Email already exists\",\n    \"http_code\": 400\n}"
						}
					]
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.message).to.equals('Login Success');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should contain access_token', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    // access token test value\r",
									"    pm.expect(data).to.haveOwnProperty('access_token');\r",
									"    pm.expect(data.access_token).to.not.equals('');\r",
									"\r",
									"    // access token test value\r",
									"    pm.expect(data).to.haveOwnProperty('refresh_token');\r",
									"    pm.expect(data.refresh_token).to.not.equals('');\r",
									"\r",
									"    // add access token and refresh token in environment\r",
									"    pm.environment.set('accessToken', data.access_token);\r",
									"    pm.environment.set('refreshToken', data.refresh_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"test1@test1.com\",\r\n    \"password\" : \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/login",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Login Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\" : \"test1@test1.com\",\r\n    \"password\" : \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/v1/login",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"v1",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-RateLimit-PathLimit",
									"value": "50"
								},
								{
									"key": "X-RateLimit-PathRemaining",
									"value": "49"
								},
								{
									"key": "X-RateLimit-PathReset",
									"value": "1690859882918"
								},
								{
									"key": "X-RateLimit-UserLimit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-UserRemaining",
									"value": "99"
								},
								{
									"key": "X-RateLimit-UserReset",
									"value": "1690859922918"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "519"
								},
								{
									"key": "Date",
									"value": "Tue, 01 Aug 2023 03:17:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Login Success\",\n    \"http_code\": 200,\n    \"data\": {\n        \"access_token\": \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsa296ZHdobzAwMDB2bWI4aWUzOGVycWYiLCJpYXQiOjE2OTA4NTk4MjIsImV4cCI6MTY5MDg2MzQyMn0.cuMslMX_1TqyqSWjRBg4bPkaEnTb3ElZAg_X2QxqLdbIdCOlnq2jp0ucxOSUmMAkKcqAli9VB-80_wyRISo0Jw\",\n        \"refresh_token\": \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsa296ZHdobzAwMDB2bWI4aWUzOGVycWYiLCJpYXQiOjE2OTA4NTk4MjIsImV4cCI6MTY5MTExOTAyMn0.j6EGylZl4-PkEFnfvkW2gvPU0rRaUUn5jdiYorvgxHqL_PUZzrrHfPzfZNES3H389jVQBsiogNuuLArgh2gpCg\"\n    }\n}"
						},
						{
							"name": "Login Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\" : \"test1@test2.com\",\r\n    \"password\" : \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/v1/login",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"v1",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-RateLimit-PathLimit",
									"value": "50"
								},
								{
									"key": "X-RateLimit-PathRemaining",
									"value": "48"
								},
								{
									"key": "X-RateLimit-PathReset",
									"value": "1690862436762"
								},
								{
									"key": "X-RateLimit-UserLimit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-UserRemaining",
									"value": "98"
								},
								{
									"key": "X-RateLimit-UserReset",
									"value": "1690862476761"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "49"
								},
								{
									"key": "Date",
									"value": "Tue, 01 Aug 2023 04:00:29 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Invalid Credentials\",\n    \"http_code\": 401\n}"
						}
					]
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.message).to.equals('token updated successfully');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should contain access_token', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    // access token test value\r",
									"    pm.expect(data).to.haveOwnProperty('access_token');\r",
									"    pm.expect(data.access_token).to.not.equals('');\r",
									"\r",
									"    // access token test value\r",
									"    pm.expect(data).to.haveOwnProperty('refresh_token');\r",
									"    pm.expect(data.refresh_token).to.not.equals('');\r",
									"\r",
									"    // add access token and refresh token in environment\r",
									"    pm.environment.set('accessToken', data.access_token);\r",
									"    pm.environment.set('refreshToken', data.refresh_token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/refresh",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"refresh"
							]
						}
					},
					"response": [
						{
							"name": "Refresh Token Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"refresh_token\": \"{{refreshToken}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/v1/refresh",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"v1",
										"refresh"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-RateLimit-PathLimit",
									"value": "50"
								},
								{
									"key": "X-RateLimit-PathRemaining",
									"value": "48"
								},
								{
									"key": "X-RateLimit-PathReset",
									"value": "1690862640191"
								},
								{
									"key": "X-RateLimit-UserLimit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-UserRemaining",
									"value": "97"
								},
								{
									"key": "X-RateLimit-UserReset",
									"value": "1690862590119"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "532"
								},
								{
									"key": "Date",
									"value": "Tue, 01 Aug 2023 04:03:07 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"token updated successfully\",\n    \"http_code\": 200,\n    \"data\": {\n        \"access_token\": \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsa296ZHdobzAwMDB2bWI4aWUzOGVycWYiLCJpYXQiOjE2OTA4NjI1ODcsImV4cCI6MTY5MDg2NjE4N30.Y_a-OsPl3hakg573THQo2WcEqMypa2aOCL7EaKOJB_OlaYtsdZH8vUoebVadOb3KJCxEgpZ07rjxfO3ddRX3fA\",\n        \"refresh_token\": \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsa296ZHdobzAwMDB2bWI4aWUzOGVycWYiLCJpYXQiOjE2OTA4NjI1ODcsImV4cCI6MTY5MTEyMTc4N30.llwjsupoLwhFnkUOhQGQjCOvnT-yhYNCYaYeykbNL9WrAzrjzSrvQr57CBDsVkVi-hipGF-Jgpt2V5VznIq5lw\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update Password",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsa296ZHdobzAwMDB2bWI4aWUzOGVycWYiLCJpYXQiOjE2OTA3MzQ4ODEsImV4cCI6MTY5MDczODQ4MX0.MnOhnunuQxpmA_31LoHLf8xiGzEZqUJ_rzIGVXFHpJ0vPsXVXuv8tVtM1rkVCI22FLgHRhoGlI_7o3aJ63-4HQ",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\" : \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/update_password",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"update_password"
							]
						}
					},
					"response": [
						{
							"name": "Update Password",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\" : \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/v1/update_password",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"v1",
										"update_password"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-RateLimit-PathLimit",
									"value": "50"
								},
								{
									"key": "X-RateLimit-PathRemaining",
									"value": "49"
								},
								{
									"key": "X-RateLimit-PathReset",
									"value": "1690735208730"
								},
								{
									"key": "X-RateLimit-UserLimit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-UserRemaining",
									"value": "99"
								},
								{
									"key": "X-RateLimit-UserReset",
									"value": "1690735248730"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "55"
								},
								{
									"key": "Date",
									"value": "Sun, 30 Jul 2023 16:39:08 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Update Password Success!.\",\n    \"http_code\": 201\n}"
						}
					]
				}
			]
		},
		{
			"name": "Profile Endpoints",
			"item": [
				{
					"name": "Get Profile",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://192.168.137.1:3000/v1/profile",
							"protocol": "http",
							"host": [
								"192",
								"168",
								"137",
								"1"
							],
							"port": "3000",
							"path": [
								"v1",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fullname\" : \"qywok\",\r\n    \"email\" : \"test1@test1.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://192.168.137.1:3000/v1/profile",
							"protocol": "http",
							"host": [
								"192",
								"168",
								"137",
								"1"
							],
							"port": "3000",
							"path": [
								"v1",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://192.168.137.1:3000/v1/profile",
							"protocol": "http",
							"host": [
								"192",
								"168",
								"137",
								"1"
							],
							"port": "3000",
							"path": [
								"v1",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Book Endpoints (old)",
			"item": [
				{
					"name": "[Mandatory] Add Book With Complete Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson.message).to.equals('Buku berhasil ditambahkan');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should contain bookId', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('bookId');\r",
									"    pm.expect(data.bookId).to.not.equals('');\r",
									"\r",
									"    pm.environment.set('bookId', data.bookId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{newName}}\",\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": {{newPageCount}},\r\n    \"readPage\": {{newReadPage}},\r\n    \"reading\": {{newReading}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/v1/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books"
							]
						}
					},
					"response": [
						{
							"name": "[Mandatory] Add Book With Complete Data",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{newName}}\",\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": {{newPageCount}},\r\n    \"readPage\": {{newReadPage}},\r\n    \"reading\": {{newReading}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "95"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:42:39 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Buku berhasil ditambahkan\",\n    \"data\": {\n        \"bookId\": \"u8FgV0Zb0RfS7k2W\"\n    }\n}"
						}
					]
				},
				{
					"name": "[Mandatory] Add Book Without Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.not.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson.message).to.equals('Gagal menambahkan buku. Mohon isi nama buku');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": {{newPageCount}},\r\n    \"readPage\": {{newReadPage}},\r\n    \"reading\": {{newReading}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "[Mandatory] Add Book Without Name",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": {{newPageCount}},\r\n    \"readPage\": {{newReadPage}},\r\n    \"reading\": {{newReading}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "73"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:42:57 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"fail\",\n    \"message\": \"Gagal menambahkan buku. Mohon isi nama buku\"\n}"
						}
					]
				},
				{
					"name": "[Mandatory] Add Book with Page Read More Than Page Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.not.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson.message).to.equals('Gagal menambahkan buku. readPage tidak boleh lebih besar dari pageCount');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{newName}}\",\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": 80,\r\n    \"readPage\": 90,\r\n    \"reading\": {{newReading}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "[Mandatory] Add Book with Page Read More Than Page Count",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{newName}}\",\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": 80,\r\n    \"readPage\": 90,\r\n    \"reading\": {{newReading}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "101"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:43:08 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"fail\",\n    \"message\": \"Gagal menambahkan buku. readPage tidak boleh lebih besar dari pageCount\"\n}"
						}
					]
				},
				{
					"name": "[Mandatory] Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responsJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responsJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responsJson.status).to.equals('success');\r",
									"    pm.expect(responsJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data object should have a array books and contains one items', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('books');\r",
									"    pm.expect(data.books).to.be.an('array');\r",
									"    pm.expect(data.books).to.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test('the books should have contains only id, name, and publisher property', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data: { books } } = responseJson;\r",
									"\r",
									"    books.forEach((book) => {\r",
									"        pm.expect(Object.keys(book)).to.lengthOf(3);\r",
									"        pm.expect(book).to.haveOwnProperty('id');\r",
									"        pm.expect(book).to.haveOwnProperty('name');\r",
									"        pm.expect(book).to.haveOwnProperty('publisher');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "[Mandatory] Get All Books",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "114"
								},
								{
									"key": "accept-ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:43:30 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": {\n        \"books\": [\n            {\n                \"id\": \"u8FgV0Zb0RfS7k2W\",\n                \"name\": \"Buku A\",\n                \"publisher\": \"Dicoding Indonesia\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "[Mandatory] Get Detail Books With Correct Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () =>  {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should contain correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data object should contain book object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('book');\r",
									"    pm.expect(data.book).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('book object should contain correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data: { book } } = responseJson;\r",
									"\r",
									"    pm.expect(book).to.haveOwnProperty('id');\r",
									"    pm.expect(book).to.haveOwnProperty('name');\r",
									"    pm.expect(book).to.haveOwnProperty('year');\r",
									"    pm.expect(book).to.haveOwnProperty('author');\r",
									"    pm.expect(book).to.haveOwnProperty('summary');\r",
									"    pm.expect(book).to.haveOwnProperty('publisher');\r",
									"    pm.expect(book).to.haveOwnProperty('pageCount');\r",
									"    pm.expect(book).to.haveOwnProperty('readPage');\r",
									"    pm.expect(book).to.haveOwnProperty('finished');\r",
									"    pm.expect(book).to.haveOwnProperty('reading');\r",
									"    pm.expect(book).to.haveOwnProperty('insertedAt');\r",
									"    pm.expect(book).to.haveOwnProperty('updatedAt');\r",
									"\r",
									"    pm.expect(book.id).to.equals(pm.environment.get('bookId'));\r",
									"    pm.expect(book.name).to.equals(pm.environment.get('newName'));\r",
									"    pm.expect(book.year).to.equals(Number(pm.environment.get('newYear')));\r",
									"    pm.expect(book.author).to.equals(pm.environment.get('newAuthor'));\r",
									"    pm.expect(book.summary).to.equals(pm.environment.get('newSummary'));\r",
									"    pm.expect(book.publisher).to.equals(pm.environment.get('newPublisher'));\r",
									"    pm.expect(book.pageCount).to.equals(Number(pm.environment.get('newPageCount')));\r",
									"    pm.expect(book.readPage).to.equals(Number(pm.environment.get('newReadPage')));\r",
									"    pm.expect(book.finished).to.equals(pm.environment.get('newPageCount') === pm.environment.get('newReadPage'));\r",
									"    pm.expect(book.reading).to.equals(pm.environment.get('newReading') == 'true');\r",
									"    pm.expect(book.insertedAt).to.not.equals('');\r",
									"    pm.expect(book.updatedAt).to.not.equals('');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/books/{{bookId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": [
						{
							"name": "[Mandatory] Get Detail Books With Correct Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/books/{{bookId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books",
										"{{bookId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "324"
								},
								{
									"key": "accept-ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:43:41 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": {\n        \"book\": {\n            \"id\": \"u8FgV0Zb0RfS7k2W\",\n            \"name\": \"Buku A\",\n            \"year\": 2010,\n            \"author\": \"John Doe\",\n            \"summary\": \"Lorem ipsum dolor sit amet\",\n            \"publisher\": \"Dicoding Indonesia\",\n            \"pageCount\": 100,\n            \"readPage\": 25,\n            \"finished\": false,\n            \"reading\": false,\n            \"insertedAt\": \"2022-06-05T14:42:39.746Z\",\n            \"updatedAt\": \"2022-06-05T14:42:39.746Z\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "[Mandatory] Get Detail Books With Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response code should be 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () =>  {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should contain correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson.message).to.equals('Buku tidak ditemukan');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/books/xxxxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books",
								"xxxxx"
							]
						}
					},
					"response": [
						{
							"name": "[Mandatory] Get Detail Books With Invalid Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/books/xxxxx",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books",
										"xxxxx"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "50"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:43:49 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"fail\",\n    \"message\": \"Buku tidak ditemukan\"\n}"
						}
					]
				},
				{
					"name": "[Mandatory] Update Book With Complete Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson.message).to.equals('Buku berhasil diperbarui');\r",
									"});\r",
									"\r",
									"pm.test('when get detail books', () => {\r",
									"    pm.sendRequest(`http://localhost:${pm.environment.get('port')}/books/${pm.environment.get('bookId')}`, (error, response) => {\r",
									"       const responseJson = response.json();\r",
									"       const { data: { book} } = responseJson;\r",
									"\r",
									"       pm.test('book object should contain updated values', () => {\r",
									"            pm.expect(book).to.haveOwnProperty('id');\r",
									"            pm.expect(book).to.haveOwnProperty('name');\r",
									"            pm.expect(book).to.haveOwnProperty('year');\r",
									"            pm.expect(book).to.haveOwnProperty('author');\r",
									"            pm.expect(book).to.haveOwnProperty('summary');\r",
									"            pm.expect(book).to.haveOwnProperty('publisher');\r",
									"            pm.expect(book).to.haveOwnProperty('pageCount');\r",
									"            pm.expect(book).to.haveOwnProperty('readPage');\r",
									"            pm.expect(book).to.haveOwnProperty('finished');\r",
									"            pm.expect(book).to.haveOwnProperty('reading');\r",
									"            pm.expect(book).to.haveOwnProperty('insertedAt');\r",
									"            pm.expect(book).to.haveOwnProperty('updatedAt');\r",
									"            \r",
									"            pm.expect(book.id).to.equals(pm.environment.get('bookId'));\r",
									"            pm.expect(book.name).to.equals(pm.environment.get('updateName'));\r",
									"            pm.expect(book.year).to.equals(Number(pm.environment.get('updateYear')));\r",
									"            pm.expect(book.author).to.equals(pm.environment.get('updateAuthor'));\r",
									"            pm.expect(book.summary).to.equals(pm.environment.get('updateSummary'));\r",
									"            pm.expect(book.publisher).to.equals(pm.environment.get('updatePublisher'));\r",
									"            pm.expect(book.pageCount).to.equals(Number(pm.environment.get('updatePageCount')));\r",
									"            pm.expect(book.readPage).to.equals(Number(pm.environment.get('updateReadPage')));\r",
									"            pm.expect(book.finished).to.equals(pm.environment.get('updateReadPage') === pm.environment.get('updatePageCount'));\r",
									"            pm.expect(book.reading).to.equals(pm.environment.get('updateReading') == 'true');\r",
									"            pm.expect(book.insertedAt).to.not.equals('');\r",
									"            pm.expect(book.updatedAt).to.not.equals('');\r",
									"       }); \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{updateName}}\",\r\n    \"year\": {{updateYear}},\r\n    \"author\": \"{{updateAuthor}}\",\r\n    \"summary\": \"{{updateSummary}}\",\r\n    \"publisher\": \"{{updatePublisher}}\",\r\n    \"pageCount\": {{updatePageCount}},\r\n    \"readPage\": {{updateReadPage}},\r\n    \"reading\": {{updateReading}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/books/{{bookId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": [
						{
							"name": "[Mandatory] Update Book With Complete Data",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{updateName}}\",\r\n    \"year\": {{updateYear}},\r\n    \"author\": \"{{updateAuthor}}\",\r\n    \"summary\": \"{{updateSummary}}\",\r\n    \"publisher\": \"{{updatePublisher}}\",\r\n    \"pageCount\": {{updatePageCount}},\r\n    \"readPage\": {{updateReadPage}},\r\n    \"reading\": {{updateReading}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/books/{{bookId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books",
										"{{bookId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "57"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:44:04 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Buku berhasil diperbarui\"\n}"
						}
					]
				},
				{
					"name": "[Mandatory] Update Book Without Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.not.haveOwnProperty('data')\r",
									"\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson.message).to.equals('Gagal memperbarui buku. Mohon isi nama buku');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"year\": {{updateYear}},\r\n    \"author\": \"{{updateAuthor}}\",\r\n    \"summary\": \"{{updateSummary}}\",\r\n    \"publisher\": \"{{updatePublisher}}\",\r\n    \"pageCount\": {{updatePageCount}},\r\n    \"readPage\": {{updateReadPage}},\r\n    \"reading\": {{updateReading}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/books/{{bookId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": [
						{
							"name": "[Mandatory] Update Book Without Name",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"year\": {{updateYear}},\r\n    \"author\": \"{{updateAuthor}}\",\r\n    \"summary\": \"{{updateSummary}}\",\r\n    \"publisher\": \"{{updatePublisher}}\",\r\n    \"pageCount\": {{updatePageCount}},\r\n    \"readPage\": {{updateReadPage}},\r\n    \"reading\": {{updateReading}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/books/{{bookId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books",
										"{{bookId}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "73"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:44:13 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"fail\",\n    \"message\": \"Gagal memperbarui buku. Mohon isi nama buku\"\n}"
						}
					]
				},
				{
					"name": "[Mandatory] Update Book With Page Read More Than Page Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson).to.not.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson.message).to.equals('Gagal memperbarui buku. readPage tidak boleh lebih besar dari pageCount');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{updateName}}\",\r\n    \"year\": {{updateYear}},\r\n    \"author\": \"{{updateAuthor}}\",\r\n    \"summary\": \"{{updateSummary}}\",\r\n    \"publisher\": \"{{updatePublisher}}\",\r\n    \"pageCount\": 80,\r\n    \"readPage\": 90,\r\n    \"reading\": {{updateReading}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/books/{{bookId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": [
						{
							"name": "[Mandatory] Update Book With Page Read More Than Page Count",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{updateName}}\",\r\n    \"year\": {{updateYear}},\r\n    \"author\": \"{{updateAuthor}}\",\r\n    \"summary\": \"{{updateSummary}}\",\r\n    \"publisher\": \"{{updatePublisher}}\",\r\n    \"pageCount\": 80,\r\n    \"readPage\": 90,\r\n    \"reading\": {{updateReading}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/books/{{bookId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books",
										"{{bookId}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "101"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:44:23 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"fail\",\n    \"message\": \"Gagal memperbarui buku. readPage tidak boleh lebih besar dari pageCount\"\n}"
						}
					]
				},
				{
					"name": "[Mandatory] Update Book with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson.message).to.equals('Gagal memperbarui buku. Id tidak ditemukan');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{updateName}}\",\r\n    \"year\": {{updateYear}},\r\n    \"author\": \"{{updateAuthor}}\",\r\n    \"summary\": \"{{updateSummary}}\",\r\n    \"publisher\": \"{{updatePublisher}}\",\r\n    \"pageCount\": {{updatePageCount}},\r\n    \"readPage\": {{updateReadPage}},\r\n    \"reading\": {{updateReading}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/books/xxxxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books",
								"xxxxx"
							]
						}
					},
					"response": [
						{
							"name": "[Mandatory] Update Book with Invalid Id",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{updateName}}\",\r\n    \"year\": {{updateYear}},\r\n    \"author\": \"{{updateAuthor}}\",\r\n    \"summary\": \"{{updateSummary}}\",\r\n    \"publisher\": \"{{updatePublisher}}\",\r\n    \"pageCount\": {{updatePageCount}},\r\n    \"readPage\": {{updateReadPage}},\r\n    \"reading\": {{updateReading}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/books/xxxxx",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books",
										"xxxxx"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "72"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:44:31 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"fail\",\n    \"message\": \"Gagal memperbarui buku. Id tidak ditemukan\"\n}"
						}
					]
				},
				{
					"name": "[Mandatory] Delete Book with Correct Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson.message).to.equals('Buku berhasil dihapus');\r",
									"});\r",
									"\r",
									"pm.test('when get detail books', () => {\r",
									"    pm.sendRequest(`http://localhost:${pm.environment.get('port')}/books/${pm.environment.get('bookId')}`, (error, response) => {\r",
									"       pm.test('The book should be not found', () => {\r",
									"          pm.expect(response.code).to.equals(404);\r",
									"       }); \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/books/{{bookId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": [
						{
							"name": "[Mandatory] Delete Book with Correct Id",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/books/{{bookId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books",
										"{{bookId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "54"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:44:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Buku berhasil dihapus\"\n}"
						}
					]
				},
				{
					"name": "[Mandatory] Delete Book with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson.message).to.equals('Buku gagal dihapus. Id tidak ditemukan');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/books/xxxxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books",
								"xxxxx"
							]
						}
					},
					"response": [
						{
							"name": "[Mandatory] Delete Book with Invalid Id",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/books/xxxxx",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books",
										"xxxxx"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "68"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:44:46 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"fail\",\n    \"message\": \"Buku gagal dihapus. Id tidak ditemukan\"\n}"
						}
					]
				},
				{
					"name": "Add Reading and Finished Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{newName}}\",\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 100,\r\n    \"reading\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "Add Reading and Finished Book",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{newName}}\",\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 100,\r\n    \"reading\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "95"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:45:00 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Buku berhasil ditambahkan\",\n    \"data\": {\n        \"bookId\": \"8oK9gUMc4lqdaXg9\"\n    }\n}"
						}
					]
				},
				{
					"name": "Add Reading and Unfinished Book with \"Dicoding\" Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Kelas Dicoding\",\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 99,\r\n    \"reading\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "Add Reading and Unfinished Book with \"Dicoding\" Name",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kelas Dicoding\",\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 99,\r\n    \"reading\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "95"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:45:09 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Buku berhasil ditambahkan\",\n    \"data\": {\n        \"bookId\": \"hUrUWLbx946zfXsT\"\n    }\n}"
						}
					]
				},
				{
					"name": "Add Unreading Books and Unfinished Book \"Dicoding\" Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"dicoding Jobs\",\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 0,\r\n    \"reading\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "Add Unreading Books and Unfinished Book \"Dicoding\" Name",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"dicoding Jobs\",\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 0,\r\n    \"reading\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "95"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:45:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Buku berhasil ditambahkan\",\n    \"data\": {\n        \"bookId\": \"2J-G-N04NFcUwT_P\"\n    }\n}"
						}
					]
				},
				{
					"name": "Add Unreading Books and Unfinished Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{newName}}\",\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 0,\r\n    \"reading\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "Add Unreading Books and Unfinished Book",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{newName}}\",\r\n    \"year\": {{newYear}},\r\n    \"author\": \"{{newAuthor}}\",\r\n    \"summary\": \"{{newSummary}}\",\r\n    \"publisher\": \"{{newPublisher}}\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 0,\r\n    \"reading\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "95"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:45:25 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Buku berhasil ditambahkan\",\n    \"data\": {\n        \"bookId\": \"AAarpBREs6b8E9f4\"\n    }\n}"
						}
					]
				},
				{
					"name": "[Optional] Get All Reading Books",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responsJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responsJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responsJson.status).to.equals('success');\r",
									"    pm.expect(responsJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data object should have a array books and contains 2 items', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('books');\r",
									"    pm.expect(data.books).to.be.an('array');\r",
									"    pm.expect(data.books).to.lengthOf(2);\r",
									"});\r",
									"\r",
									"pm.test('the books should have contains only name and publisher property', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data: { books } } = responseJson;\r",
									"\r",
									"    books.forEach((book) => {\r",
									"        pm.expect(Object.keys(book)).to.lengthOf(3);\r",
									"        pm.expect(book).to.haveOwnProperty('id');\r",
									"        pm.expect(book).to.haveOwnProperty('name');\r",
									"        pm.expect(book).to.haveOwnProperty('publisher');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/books?reading=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books"
							],
							"query": [
								{
									"key": "reading",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "[Optional] Get All Reading Books",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/books?reading=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									],
									"query": [
										{
											"key": "reading",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "197"
								},
								{
									"key": "accept-ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:45:34 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": {\n        \"books\": [\n            {\n                \"id\": \"8oK9gUMc4lqdaXg9\",\n                \"name\": \"Buku A\",\n                \"publisher\": \"Dicoding Indonesia\"\n            },\n            {\n                \"id\": \"hUrUWLbx946zfXsT\",\n                \"name\": \"Kelas Dicoding\",\n                \"publisher\": \"Dicoding Indonesia\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "[Optional] Get All Unreading Books",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responsJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responsJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responsJson.status).to.equals('success');\r",
									"    pm.expect(responsJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data object should have a array books and contains at 2 items', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('books');\r",
									"    pm.expect(data.books).to.be.an('array');\r",
									"    pm.expect(data.books).to.lengthOf(2);\r",
									"});\r",
									"\r",
									"pm.test('the books should have contains only name and publisher property', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data: { books } } = responseJson;\r",
									"\r",
									"    books.forEach((book) => {\r",
									"        pm.expect(Object.keys(book)).to.lengthOf(3);\r",
									"        pm.expect(book).to.haveOwnProperty('id');\r",
									"        pm.expect(book).to.haveOwnProperty('name');\r",
									"        pm.expect(book).to.haveOwnProperty('publisher');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/books?reading=0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books"
							],
							"query": [
								{
									"key": "reading",
									"value": "0"
								}
							]
						}
					},
					"response": [
						{
							"name": "[Optional] Get All Unreading Books",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/books?reading=0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									],
									"query": [
										{
											"key": "reading",
											"value": "0"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "196"
								},
								{
									"key": "accept-ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:45:42 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": {\n        \"books\": [\n            {\n                \"id\": \"2J-G-N04NFcUwT_P\",\n                \"name\": \"dicoding Jobs\",\n                \"publisher\": \"Dicoding Indonesia\"\n            },\n            {\n                \"id\": \"AAarpBREs6b8E9f4\",\n                \"name\": \"Buku A\",\n                \"publisher\": \"Dicoding Indonesia\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "[Optional] Get All Finished Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responsJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responsJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responsJson.status).to.equals('success');\r",
									"    pm.expect(responsJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data object should have a array books and contains 1 items', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('books');\r",
									"    pm.expect(data.books).to.be.an('array');\r",
									"    pm.expect(data.books).to.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test('the books should have contains only name and publisher property', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data: { books } } = responseJson;\r",
									"\r",
									"    books.forEach((book) => {\r",
									"        pm.expect(Object.keys(book)).to.lengthOf(3);\r",
									"        pm.expect(book).to.haveOwnProperty('id');\r",
									"        pm.expect(book).to.haveOwnProperty('name');\r",
									"        pm.expect(book).to.haveOwnProperty('publisher');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/books?finished=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books"
							],
							"query": [
								{
									"key": "finished",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "[Optional] Get All Finished Books",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/books?finished=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									],
									"query": [
										{
											"key": "finished",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "114"
								},
								{
									"key": "accept-ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:45:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": {\n        \"books\": [\n            {\n                \"id\": \"8oK9gUMc4lqdaXg9\",\n                \"name\": \"Buku A\",\n                \"publisher\": \"Dicoding Indonesia\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "[Optional] Get All Unfinished Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responsJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responsJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responsJson.status).to.equals('success');\r",
									"    pm.expect(responsJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data object should have a array books and contains 3 items', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('books');\r",
									"    pm.expect(data.books).to.be.an('array');\r",
									"    pm.expect(data.books).to.lengthOf(3);\r",
									"});\r",
									"\r",
									"pm.test('the books should have contains only name and publisher property', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data: { books } } = responseJson;\r",
									"\r",
									"    books.forEach((book) => {\r",
									"        pm.expect(Object.keys(book)).to.lengthOf(3);\r",
									"        pm.expect(book).to.haveOwnProperty('id');\r",
									"        pm.expect(book).to.haveOwnProperty('name');\r",
									"        pm.expect(book).to.haveOwnProperty('publisher');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/books?finished=0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books"
							],
							"query": [
								{
									"key": "finished",
									"value": "0"
								}
							]
						}
					},
					"response": [
						{
							"name": "[Optional] Get All Unfinished Books",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/books?finished=0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									],
									"query": [
										{
											"key": "finished",
											"value": "0"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "279"
								},
								{
									"key": "accept-ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:46:04 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": {\n        \"books\": [\n            {\n                \"id\": \"hUrUWLbx946zfXsT\",\n                \"name\": \"Kelas Dicoding\",\n                \"publisher\": \"Dicoding Indonesia\"\n            },\n            {\n                \"id\": \"2J-G-N04NFcUwT_P\",\n                \"name\": \"dicoding Jobs\",\n                \"publisher\": \"Dicoding Indonesia\"\n            },\n            {\n                \"id\": \"AAarpBREs6b8E9f4\",\n                \"name\": \"Buku A\",\n                \"publisher\": \"Dicoding Indonesia\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "[Optional] Get All Books Contains \"Dicoding\" Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responsJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responsJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
									"\r",
									"    pm.expect(responsJson.status).to.equals('success');\r",
									"    pm.expect(responsJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data object should have a array books and contains 2 items', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('books');\r",
									"    pm.expect(data.books).to.be.an('array');\r",
									"    pm.expect(data.books).to.lengthOf(2);\r",
									"});\r",
									"\r",
									"pm.test('the books should have contains only name and publisher property', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data: { books } } = responseJson;\r",
									"\r",
									"    books.forEach((book) => {\r",
									"        pm.expect(Object.keys(book)).to.lengthOf(3);\r",
									"        pm.expect(book).to.haveOwnProperty('id');\r",
									"        pm.expect(book).to.haveOwnProperty('name');\r",
									"        pm.expect(book).to.haveOwnProperty('publisher');\r",
									"    });\r",
									"});\r",
									"\r",
									"const deleteAllNotes = () => {\r",
									"    pm.sendRequest(`http://localhost:${pm.environment.get('port')}/books`, (error, response) => {\r",
									"        const responseJson = response.json();\r",
									"        const { data: { books } } = responseJson;\r",
									"        books.forEach(({ id }) => {\r",
									"            const deleteRequest = {\r",
									"                url: `http://localhost:${pm.environment.get('port')}/books/${id}`,\r",
									"                method: 'DELETE',\r",
									"            };\r",
									"            pm.sendRequest(deleteRequest, (error, response) => {\r",
									"                if(error) {\r",
									"                    console.log(`Failed to delete book ${id}`)\r",
									"                    return;\r",
									"                }\r",
									"                console.log(`Book ${id} deleted`);\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"deleteAllNotes();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/books?name=Dicoding",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"books"
							],
							"query": [
								{
									"key": "name",
									"value": "Dicoding"
								}
							]
						}
					},
					"response": [
						{
							"name": "[Optional] Get All Books Contains \"Dicoding\" Name",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/books?name=Dicoding",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"books"
									],
									"query": [
										{
											"key": "name",
											"value": "Dicoding"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "vary",
									"value": "origin"
								},
								{
									"key": "access-control-expose-headers",
									"value": "WWW-Authenticate,Server-Authorization"
								},
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-length",
									"value": "204"
								},
								{
									"key": "accept-ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Jun 2022 14:46:15 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"data\": {\n        \"books\": [\n            {\n                \"id\": \"hUrUWLbx946zfXsT\",\n                \"name\": \"Kelas Dicoding\",\n                \"publisher\": \"Dicoding Indonesia\"\n            },\n            {\n                \"id\": \"2J-G-N04NFcUwT_P\",\n                \"name\": \"dicoding Jobs\",\n                \"publisher\": \"Dicoding Indonesia\"\n            }\n        ]\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Book Endpoints",
			"item": [
				{
					"name": "Add Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8'); \r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Add Book Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(201);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"perang eropa 1939\",\r\n    \"year\" : 2015,\r\n    \"author\" : \"no name\",\r\n    \"summary\" : \"buku mengenai perang pasifik\",\r\n    \"publisher\" : \"penerbit andi\",\r\n    \"pageCount\" : 500,\r\n    \"stock\" : 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/books",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Get Books Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/books",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Book By Book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Get Detail Book Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/books/clkxe37as0002vmhczp1nhctu",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books",
								"clkxe37as0002vmhczp1nhctu"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Book By Book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Update Book Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(201);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"fisika klasik\",\r\n    \"year\" : 2020,\r\n    \"author\" : \"no name\",\r\n    \"summary\" : \"buku mengenai fisika kuantum\",\r\n    \"publisher\" : \"penerbit andi\",\r\n    \"pageCount\" : 200,\r\n    \"stock\" : 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/books/cll6eozaz0001vm3k3a4aljpp",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books",
								"cll6eozaz0001vm3k3a4aljpp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Book By Book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Delete Book Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.equals(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/books/clkxkxaay0003vmjgvj7gk2f8",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books",
								"clkxkxaay0003vmjgvj7gk2f8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Book By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Add Books Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/books?name=fisika",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "name",
									"value": "fisika"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Book By Year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Add Books Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/books?year=2020",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "year",
									"value": "2020"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Book By Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Add Books Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/books?author=no name",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "author",
									"value": "no name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Book By Publisher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Add Books Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/books?publisher=andi",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "publisher",
									"value": "andi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Book By Page Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Add Books Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/books?pageCount=200",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "pageCount",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Book By Stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Add Books Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/books?stock=1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "stock",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Book By All Query Params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Add Books Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/books?name=fis&year=2020&author=no&publisher=andi&pageCount=200&stock=1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "name",
									"value": "fis"
								},
								{
									"key": "year",
									"value": "2020"
								},
								{
									"key": "author",
									"value": "no"
								},
								{
									"key": "publisher",
									"value": "andi"
								},
								{
									"key": "pageCount",
									"value": "200"
								},
								{
									"key": "stock",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Activity Endpoints",
			"item": [
				{
					"name": "Add Reader Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Add Activity Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(201);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"book_id\" : \"clkxe37as0002vmhczp1nhctu\",\r\n    \"read_page\" : 1,\r\n    \"finished\" : false,\r\n    \"reading\" : false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/activities",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Reader Activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Show Activities Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/activities",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Reader Activity By Activity ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Show Activity Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/activities/clkxjytox0001vmo08hcsnkjk",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"activities",
								"clkxjytox0001vmo08hcsnkjk"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Reader Activity By Activity ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Update Activity Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(201);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"read_page\" : 10,\r\n    \"finished\" : false,\r\n    \"reading\" : true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/activities/clkyvy3zp0001vmmo92o6dpn5",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"activities",
								"clkyvy3zp0001vmmo92o6dpn5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Reader Activity By Activity ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // message test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"    pm.expect(responseJson.message).to.equals('Delete Activity Success');\r",
									"\r",
									"    // http code test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('http_code');\r",
									"    pm.expect(responseJson.http_code).to.be.an('number');\r",
									"    pm.expect(responseJson.http_code).to.equals(200);\r",
									"\r",
									"    // data test\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.equals(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/activities/clkxjueq20001vm7otv4gdggu",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"activities",
								"clkxjueq20001vm7otv4gdggu"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Activity By Book ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/activities?bookId=clkxe37as0002vmhczp1nhctu",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"activities"
							],
							"query": [
								{
									"key": "bookId",
									"value": "clkxe37as0002vmhczp1nhctu"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Activity By Read Page",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/activities?readPage=9",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"activities"
							],
							"query": [
								{
									"key": "readPage",
									"value": "9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Activity By Finished",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/activities?finished=0",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"activities"
							],
							"query": [
								{
									"key": "finished",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Activity By Reading",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/v1/activities?reading=1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"activities"
							],
							"query": [
								{
									"key": "reading",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					""
				]
			}
		}
	]
}